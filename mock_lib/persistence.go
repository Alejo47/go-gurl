// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackmann/go-gurl/lib (interfaces: Persistence)

// Package mock_lib is a generated GoMock package.
package mock_lib

import (
	reflect "reflect"

	lib "github.com/blackmann/go-gurl/lib"
	gomock "github.com/golang/mock/gomock"
)

// MockPersistence is a mock of Persistence interface.
type MockPersistence struct {
	ctrl     *gomock.Controller
	recorder *MockPersistenceMockRecorder
}

// MockPersistenceMockRecorder is the mock recorder for MockPersistence.
type MockPersistenceMockRecorder struct {
	mock *MockPersistence
}

// NewMockPersistence creates a new mock instance.
func NewMockPersistence(ctrl *gomock.Controller) *MockPersistence {
	mock := &MockPersistence{ctrl: ctrl}
	mock.recorder = &MockPersistenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersistence) EXPECT() *MockPersistenceMockRecorder {
	return m.recorder
}

// AnnotateHistory mocks base method.
func (m *MockPersistence) AnnotateHistory(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnotateHistory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnotateHistory indicates an expected call of AnnotateHistory.
func (mr *MockPersistenceMockRecorder) AnnotateHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnotateHistory", reflect.TypeOf((*MockPersistence)(nil).AnnotateHistory), arg0, arg1)
}

// GetBookmark mocks base method.
func (m *MockPersistence) GetBookmark(arg0 string) (lib.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmark", arg0)
	ret0, _ := ret[0].(lib.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmark indicates an expected call of GetBookmark.
func (mr *MockPersistenceMockRecorder) GetBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmark", reflect.TypeOf((*MockPersistence)(nil).GetBookmark), arg0)
}

// GetBookmarks mocks base method.
func (m *MockPersistence) GetBookmarks() []lib.Bookmark {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarks")
	ret0, _ := ret[0].([]lib.Bookmark)
	return ret0
}

// GetBookmarks indicates an expected call of GetBookmarks.
func (mr *MockPersistenceMockRecorder) GetBookmarks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarks", reflect.TypeOf((*MockPersistence)(nil).GetBookmarks))
}

// GetHistory mocks base method.
func (m *MockPersistence) GetHistory() []lib.History {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory")
	ret0, _ := ret[0].([]lib.History)
	return ret0
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockPersistenceMockRecorder) GetHistory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockPersistence)(nil).GetHistory))
}

// GetRawCookies mocks base method.
func (m *MockPersistence) GetRawCookies() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawCookies")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRawCookies indicates an expected call of GetRawCookies.
func (mr *MockPersistenceMockRecorder) GetRawCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawCookies", reflect.TypeOf((*MockPersistence)(nil).GetRawCookies))
}

// SaveBookmark mocks base method.
func (m *MockPersistence) SaveBookmark(arg0 lib.Bookmark) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveBookmark", arg0)
}

// SaveBookmark indicates an expected call of SaveBookmark.
func (mr *MockPersistenceMockRecorder) SaveBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookmark", reflect.TypeOf((*MockPersistence)(nil).SaveBookmark), arg0)
}

// SaveHistory mocks base method.
func (m *MockPersistence) SaveHistory(arg0 lib.History) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveHistory", arg0)
}

// SaveHistory indicates an expected call of SaveHistory.
func (mr *MockPersistenceMockRecorder) SaveHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHistory", reflect.TypeOf((*MockPersistence)(nil).SaveHistory), arg0)
}

// SaveRawCookies mocks base method.
func (m *MockPersistence) SaveRawCookies(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveRawCookies", arg0)
}

// SaveRawCookies indicates an expected call of SaveRawCookies.
func (mr *MockPersistenceMockRecorder) SaveRawCookies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRawCookies", reflect.TypeOf((*MockPersistence)(nil).SaveRawCookies), arg0)
}
